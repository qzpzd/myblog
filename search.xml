<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>butterfly教程</title>
    <url>/myblog/2023/07/27/test/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myblog/css/APlayer.min.css"><script src="/myblog/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/myblog/js/Meting.min.js"></script><h1 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h1><p>源代码</p>
<figure class="highlight plaintext"><figcaption><span>[引用块]</span></figcaption><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;blockquote&gt;&lt;p&gt;content  &lt;/p&gt;<br>&lt;footer&gt;&lt;strong&gt;author&lt;/strong&gt;&lt;cite&gt;- source [link] [source_link_title]&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;<br></code></pre></td></tr></table></figure>

<blockquote><p>content  </p>
<footer><strong>author</strong><cite>- source [link] [source_link_title]</cite></footer></blockquote>

<p>源代码</p>
<figure class="highlight plaintext"><figcaption><span>[引用块]</span></figcaption><table><tr><td class="code"><pre><code class="hljs plaintext"><br>&gt;引用内容<br>&gt;&gt;引用内容<br>&gt;&gt;&gt;yy内容<br><br></code></pre></td></tr></table></figure>

<blockquote>
<p>引用内容</p>
<blockquote>
<p>引用内容</p>
<blockquote>
<p>yy内容</p>
</blockquote>
</blockquote>
</blockquote>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>源代码</p>
<figure class="highlight plaintext"><figcaption><span>[分割线]</span></figcaption><table><tr><td class="code"><pre><code class="hljs plaintext"><br>---<br><br></code></pre></td></tr></table></figure>

<hr>
<h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>源代码</p>
<figure class="highlight plaintext"><figcaption><span>[代码块]</span></figcaption><table><tr><td class="code"><pre><code class="hljs plaintext"><br>&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;figcaption&gt;&lt;span&gt;[title] [lang:language] [url] [link text]&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs plaintext&quot;&gt;  &lt;br&gt;code snippet  &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;  <br><br></code></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>[title] [lang:language] [url] [link text]</span></figcaption><table><tr><td class="code"><pre><code class="hljs plaintext">  <br>code snippet  <br></code></pre></td></tr></table></figure>  

<h1 id="引用文章链接"><a href="#引用文章链接" class="headerlink" title="引用文章链接"></a>引用文章链接</h1><p>源代码</p>
<figure class="highlight plaintext"><figcaption><span>[链接块]</span></figcaption><table><tr><td class="code"><pre><code class="hljs plaintext"><br>&lt;a href=&quot;/2023/10/09/hello-world/&quot; title=&quot;Hello World&quot;&gt;hello-world&lt;/a&gt; <br><br></code></pre></td></tr></table></figure>

<a href="/2023/10/09/hello-world/" title="Hello World">hello-world</a>

<h1 id="选项卡"><a href="#选项卡" class="headerlink" title="选项卡"></a>选项卡</h1><p>源代码</p>
<figure class="highlight plaintext"><figcaption><span>[选项卡]</span></figcaption><table><tr><td class="code"><pre><code class="hljs plaintext"><br>&lt;div class=&quot;tabs&quot; id=&quot;标签&quot;&gt;&lt;ul class=&quot;nav-tabs&quot;&gt;&lt;li class=&quot;tab active&quot;&gt;&lt;button type=&quot;button&quot; data-href=&quot;#标签-1&quot;&gt;标签 1&lt;/button&gt;&lt;/li&gt;&lt;li class=&quot;tab&quot;&gt;&lt;button type=&quot;button&quot; data-href=&quot;#标签-2&quot;&gt;标签 2&lt;/button&gt;&lt;/li&gt;&lt;li class=&quot;tab&quot;&gt;&lt;button type=&quot;button&quot; data-href=&quot;#标签-3&quot;&gt;标签三&lt;/button&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;tab-contents&quot;&gt;&lt;div class=&quot;tab-item-content active&quot; id=&quot;标签-1&quot;&gt;&lt;p&gt;&lt;strong&gt;选项卡 1&lt;/strong&gt; &lt;/p&gt;&lt;button type=&quot;button&quot; class=&quot;tab-to-top&quot; aria-label=&quot;scroll to top&quot;&gt;&lt;i class=&quot;fas fa-arrow-up&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&quot;tab-item-content&quot; id=&quot;标签-2&quot;&gt;&lt;p&gt;&lt;strong&gt;选项卡 2&lt;/strong&gt;&lt;/p&gt;&lt;button type=&quot;button&quot; class=&quot;tab-to-top&quot; aria-label=&quot;scroll to top&quot;&gt;&lt;i class=&quot;fas fa-arrow-up&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;div class=&quot;tab-item-content&quot; id=&quot;标签-3&quot;&gt;&lt;p&gt;&lt;strong&gt;选项卡 3&lt;/strong&gt; , 名字为 &lt;code&gt;TAB三&lt;/code&gt;&lt;/p&gt;&lt;button type=&quot;button&quot; class=&quot;tab-to-top&quot; aria-label=&quot;scroll to top&quot;&gt;&lt;i class=&quot;fas fa-arrow-up&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; <br><br></code></pre></td></tr></table></figure>


<div class="tabs" id="标签"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#标签-1">标签 1</button></li><li class="tab"><button type="button" data-href="#标签-2">标签 2</button></li><li class="tab"><button type="button" data-href="#标签-3">标签三</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="标签-1"><p><strong>选项卡 1</strong> </p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="标签-2"><p><strong>选项卡 2</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="标签-3"><p><strong>选项卡 3</strong> , 名字为 <code>TAB三</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>


<p>源代码</p>
<figure class="highlight plaintext"><figcaption><span>[选项卡]</span></figcaption><table><tr><td class="code"><pre><code class="hljs plaintext"><br>&lt;div class=&quot;gallery-group-main&quot;&gt;<br><br>  &lt;figure class=&quot;gallery-group&quot;&gt;<br>  &lt;img class=&quot;gallery-group-img no-lightbox&quot; src=&#x27;https://api.aqcoder.cntoday&#x27; alt=&quot;Group Image Gallery&quot;&gt;<br>  &lt;figcaption&gt;<br>  &lt;div class=&quot;gallery-group-name&quot;&gt;壁纸&lt;/div&gt;<br>  &lt;p&gt;收藏的一些壁纸&lt;/p&gt;<br>  &lt;a href=&#x27;/myblog/Gallery/wallpaper/&#x27;&gt;&lt;/a&gt;<br>  &lt;/figcaption&gt;<br>  &lt;/figure&gt;<br>  <br>&lt;/div&gt;<br><br></code></pre></td></tr></table></figure>

<div class="gallery-group-main">

  <figure class="gallery-group">
  <img class="gallery-group-img no-lightbox" src='https://api.aqcoder.cntoday' alt="Group Image Gallery">
  <figcaption>
  <div class="gallery-group-name">壁纸</div>
  <p>收藏的一些壁纸</p>
  <a href='/myblog/gallery/wallpaper/'></a>
  </figcaption>
  </figure>
  
</div>


<h1 id="提示块"><a href="#提示块" class="headerlink" title="提示块"></a>提示块</h1><p>源代码</p>
<figure class="highlight plaintext"><figcaption><span>[提示块]</span></figcaption><table><tr><td class="code"><pre><code class="hljs plaintext"><br>&lt;div class=&quot;note default simple&quot;&gt;&lt;p&gt;default 提示块&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;div class=&quot;note primary simple&quot;&gt;&lt;p&gt;primary 提示块&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;div class=&quot;note success simple&quot;&gt;&lt;p&gt;success 提示块&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;div class=&quot;note info simple&quot;&gt;&lt;p&gt;info 提示块&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;div class=&quot;note warning simple&quot;&gt;&lt;p&gt;warning 提示块&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;div class=&quot;note danger simple&quot;&gt;&lt;p&gt;danger 提示块&lt;/p&gt;<br>&lt;/div&gt;<br><br></code></pre></td></tr></table></figure>


<div class="note default simple"><p>default 提示块</p>
</div>

<div class="note primary simple"><p>primary 提示块</p>
</div>

<div class="note success simple"><p>success 提示块</p>
</div>

<div class="note info simple"><p>info 提示块</p>
</div>

<div class="note warning simple"><p>warning 提示块</p>
</div>

<div class="note danger simple"><p>danger 提示块</p>
</div>







]]></content>
      <tags>
        <tag>-butterfly -教程</tag>
      </tags>
  </entry>
  <entry>
    <title>decorator</title>
    <url>/myblog/2023/08/10/decorator/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myblog/css/APlayer.min.css"><script src="/myblog/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/myblog/js/Meting.min.js"></script><h1 id="1、-timer-测量执行时间"><a href="#1、-timer-测量执行时间" class="headerlink" title="1、@timer:测量执行时间"></a>1、@timer:测量执行时间</h1><p>@timer装饰器可以帮助我们跟踪特定函数的执行时间。通过用这个装饰器包装函数，我可以快速识别瓶颈并优化代码的关键部分。</p>
<figure class="highlight plaintext"><figcaption><span>[测量执行时间]</span></figcaption><table><tr><td class="code"><pre><code class="hljs plaintext">import time<br> <br>def timer(func):<br>   def wrapper(*args, **kwargs):<br>       start_time = time.time()<br>       result = func(*args, **kwargs)<br>       end_time = time.time()<br>       print(f&quot;&#123;func.__name__&#125; took &#123;end_time - start_time:.2f&#125; seconds to execute.&quot;)<br>       return result<br>   return wrapper<br>@timer<br>def my_data_processing_function():<br>   # Your data processing code here<br><br></code></pre></td></tr></table></figure>

<h1 id="2-log-results-日志输出"><a href="#2-log-results-日志输出" class="headerlink" title="2.@log_results:日志输出"></a>2.@log_results:日志输出</h1><p>在运行复杂的数据分析时，跟踪每个函数的输出变得至关重要。@log_results装饰器可以帮助我们记录函数的结果，以便于调试和监控</p>
<figure class="highlight plaintext"><figcaption><span>[日志输出]</span></figcaption><table><tr><td class="code"><pre><code class="hljs plaintext">def log_results(func):<br>    def wrapper(*args, **kwargs):<br>        result = func(*args, **kwargs)<br>        with open(&quot;results.log&quot;, &quot;a&quot;) as log_file:<br>            log_file.write(f&quot;&#123;func.__name__&#125; - Result: &#123;result&#125;\n&quot;)<br>        return result<br> <br>    return wrapper<br> @log_results<br>def calculate_metrics(data):<br>   # Your metric calculation code here<br><br></code></pre></td></tr></table></figure>

<h1 id="3-suppress-errors-优雅的错误处理"><a href="#3-suppress-errors-优雅的错误处理" class="headerlink" title="3.@suppress_errors:优雅的错误处理"></a>3.@suppress_errors:优雅的错误处理</h1><p>@suppress_errors装饰器可以优雅地处理异常并继续执行,可以避免隐藏严重错误，还可以进行错误的详细输出，便于调试.</p>
<figure class="highlight plaintext"><figcaption><span>[错误处理]</span></figcaption><table><tr><td class="code"><pre><code class="hljs plaintext">def suppress_errors(func):<br>    def wrapper(*args, **kwargs):<br>        try:<br>            return func(*args, **kwargs)<br>        except Exception as e:<br>            print(f&quot;Error in &#123;func.__name__&#125;: &#123;e&#125;&quot;)<br>            return None<br> <br>    return wrapper<br>@suppress_errors<br>def preprocess_data(data):<br>   # Your data preprocessing code here<br><br></code></pre></td></tr></table></figure>

<h1 id="4-debug-调试变得更容易"><a href="#4-debug-调试变得更容易" class="headerlink" title="4.@debug:调试变得更容易"></a>4.@debug:调试变得更容易</h1><p>调试复杂的代码可能非常耗时。@debug装饰器可以打印函数的输入参数和它们的值，以便于调试:</p>
<figure class="highlight plaintext"><figcaption><span>[调试]</span></figcaption><table><tr><td class="code"><pre><code class="hljs plaintext">def debug(func):<br>    def wrapper(*args, **kwargs):<br>        print(f&quot;Debugging &#123;func.__name__&#125; - args: &#123;args&#125;, kwargs: &#123;kwargs&#125;&quot;)<br>        return func(*args, **kwargs)<br> <br>    return wrapper<br>@debug<br>def complex_data_processing(data, threshold=0.5):<br>   # Your complex data processing code here<br><br></code></pre></td></tr></table></figure>


<blockquote><blockquote>
<p>1.@timer:测量执行时间<br>2.@log_results:日志输出<br>3.@suppress_errors:优雅的错误处理<br>4.@debug:调试变得更容易</p>
</blockquote>
<footer><strong>数据STUDIO</strong><cite>- source [https://mp.weixin.qq.com/s/JFaH_GqOFMARnzyWqV2TFQ] [10个简单但很有用的Python装饰器]</cite></footer></blockquote>
]]></content>
      <tags>
        <tag>-python -decorator</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/myblog/2023/10/09/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myblog/css/APlayer.min.css"><script src="/myblog/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/myblog/js/Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>decorator</title>
    <url>/myblog/2023/08/10/onnx_detect/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/myblog/css/APlayer.min.css"><script src="/myblog/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/myblog/js/Meting.min.js"></script><p>训练好的深度学习模型通常需要转换为onnx模型，官方有onnx的测试代码，这里重新进行构建，并手动生成anchor文件，进行onnx模型测试，对于输入图像前处理也分为两部分，一个包含letterbox；一个不包含直接resize，显然后一个精度会有多降低</p>
<h1 id="后处理"><a href="#后处理" class="headerlink" title="后处理"></a>后处理</h1><figure class="highlight plaintext"><figcaption><span>[后处理]</span></figcaption><table><tr><td class="code"><pre><code class="hljs plaintext">import onnxruntime<br>import cv2<br>import numpy as np<br>import torch<br>#---------------------NMS--------------------------------------------------------------------<br>def py_cpu_nms(dets0, conf_thresh, iou_thresh):<br>    &quot;&quot;&quot;Pure Python NMS baseline.&quot;&quot;&quot;<br>    nc = dets0.shape[1] - 5<br>    dets = dets0[dets0[:, 4] &gt; conf_thresh]<br>    dets = xywh2xyxy(dets)<br>    <br>    keep_all = []<br>    for cls in range(nc):<br>        dets_single = dets[np.argmax(dets[:,5:],axis=1)==cls]<br>        #print(&#x27;dets_single %d&#x27;%cls,dets_single)<br>        x1 = dets_single[:, 0]<br>        y1 = dets_single[:, 1]<br>        x2 = dets_single[:, 2]<br>        y2 = dets_single[:, 3]<br>        scores = dets_single[:, 4]<br>        areas = (x2 - x1 + 1) * (y2 - y1 + 1) <br>        order = scores.argsort()[::-1]<br>        keep = []<br>        while order.size &gt; 0:<br>            i = order[0]<br>            keep.append(i)  <br>            xx1 = np.maximum(x1[i], x1[order[1:]])<br>            yy1 = np.maximum(y1[i], y1[order[1:]])<br>            xx2 = np.minimum(x2[i], x2[order[1:]])<br>            yy2 = np.minimum(y2[i], y2[order[1:]])<br>            w = np.maximum(0.0, xx2 - xx1 + 1)<br>            h = np.maximum(0.0, yy2 - yy1 + 1)<br>            inter = w * h<br>            ovr = inter / (areas[i] + areas[order[1:]] - inter)<br>            inds = np.where(ovr &lt;= iou_thresh)[0]<br>            order = order[inds + 1]<br>        keep_rect = dets_single[keep]<br>        #print(&#x27;keep&#x27;,keep)<br>        keep_all.extend(keep_rect)<br>    return keep_all<br> <br>def xywh2xyxy(x):<br>    # Convert nx4 boxes from [x, y, w, h] to [x1, y1, x2, y2] where xy1=top-left, xy2=bottom-right<br>    y = np.zeros_like(x)<br>    y[:, 0] = x[:, 0] - x[:, 2] / 2  # top left x<br>    y[:, 1] = x[:, 1] - x[:, 3] / 2  # top left y<br>    y[:, 2] = x[:, 0] + x[:, 2] / 2  # bottom right x<br>    y[:, 3] = x[:, 1] + x[:, 3] / 2  # bottom right y<br>    y[:, 4:] = x[:,4:]<br>    return y<br><br>#---------------------img_preprocess-----------------------------------------------------------------<br>def img_preprocess(frame,imgsz):<br>    # im = letterbox(frame, imgsz)[0]<br>    im = cv2.resize(frame,(640,384))<br>    im = im.transpose((2, 0, 1))[::-1]  # HWC to CHW, BGR to RGB<br>    im = np.ascontiguousarray(im)  # contiguous<br>    im = np.asarray(im, dtype=np.float32)<br>    im = np.expand_dims(im, 0)<br>    im /= 255.0<br>    return im<br><br>#---------------------------letterbox------------------------------------------------------------------<br>def letterbox(im, new_shape=(640, 640), color=(114, 114, 114), auto=True, scaleFill=False, scaleup=True, stride=32):<br>    # Resize and pad image while meeting stride-multiple constraints<br>    shape = im.shape[:2]  # current shape [height, width]<br>    if isinstance(new_shape, int):<br>        new_shape = (new_shape, new_shape)<br><br>    # Scale ratio (new / old)<br>    r = min(new_shape[0] / shape[0], new_shape[1] / shape[1])<br>    if not scaleup:  # only scale down, do not scale up (for better val mAP)<br>        r = min(r, 1.0)<br><br>    # Compute padding<br>    ratio = r, r  # width, height ratios<br>    new_unpad = int(round(shape[1] * r)), int(round(shape[0] * r))<br>    dw, dh = new_shape[1] - new_unpad[0], new_shape[0] - new_unpad[1]  # wh padding<br>    if auto:  # minimum rectangle<br>        dw, dh = np.mod(dw, stride), np.mod(dh, stride)  # wh padding<br>    elif scaleFill:  # stretch<br>        dw, dh = 0.0, 0.0<br>        new_unpad = (new_shape[1], new_shape[0])<br>        ratio = new_shape[1] / shape[1], new_shape[0] / shape[0]  # width, height ratios<br><br>    dw /= 2  # divide padding into 2 sides<br>    dh /= 2<br><br>    if shape[::-1] != new_unpad:  # resize<br>        im = cv2.resize(im, new_unpad, interpolation=cv2.INTER_LINEAR)<br>    top, bottom = int(round(dh - 0.1)), int(round(dh + 0.1))<br>    left, right = int(round(dw - 0.1)), int(round(dw + 0.1))<br>    im = cv2.copyMakeBorder(im, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)  # add border<br>    return im, ratio, (dw, dh)<br><br>#-----------------------------decode----------------------------------------<br>def np_sigmoid(x):<br>    return 1.0/(1.0+1.0/np.exp(x))<br>    <br>def decode_output(pred_raw_data,anchor_txt):<br>    pred_raw_data = np_sigmoid(pred_raw_data)<br>    print(max(pred_raw_data[:, 4]))<br>    pred_raw_data[:, 0] = (pred_raw_data[:, 0] * 2. - 0.5 + anchor_txt[:, 0]) * anchor_txt[:, 4] #x<br>    pred_raw_data[:, 1] = (pred_raw_data[:, 1] * 2. - 0.5 + anchor_txt[:, 1]) * anchor_txt[:, 4] #y<br>    pred_raw_data[:, 2] = (pred_raw_data[:, 2] * 2) ** 2 * anchor_txt[:, 2]  # w<br>    pred_raw_data[:, 3] = (pred_raw_data[:, 3] * 2) ** 2 * anchor_txt[:, 3]  # h<br>    <br>    return pred_raw_data<br>    <br>#-------------------------scale_ratio------------------------------------------------------<br>def helmet_scale_ratio(each,frame,imgsz=640):<br>    ratio = (frame.shape[0] /384 , frame.shape[1] / imgsz)<br>    each[[0, 2]] *= ratio[1]<br>    each[[1, 3]] *= ratio[0]<br>    return each<br>     <br>#---------------------helmet_detect----------------------------------------------------------------------------<br>def helmet_detect(face_model,frame):<br>    anchors = np.fromfile(&#x27;C:/Users/suso/Desktop/yolov5_fire/yolov5_fire_priorbox_384-640.txt&#x27;,sep=&#x27; &#x27;)<br>    anchors = anchors.reshape(-1,5)<br>    imgsz = 640<br>    img = img_preprocess(frame,imgsz) <br><br>    session = onnxruntime.InferenceSession(face_model)<br>    in_name = [input.name for input in session.get_inputs()][0]<br>    out_name = [output.name for output in session.get_outputs()]              <br>    pred = session.run(out_name,&#123;in_name: img&#125;)  <br>    <br>    <br>    x1 = np.array(pred[0]).reshape(-1, 6)<br>    x2 = np.array(pred[1]).reshape(-1, 6)<br>    x3 = np.array(pred[2]).reshape(-1, 6)<br>    print(x3.shape,max(x3[:,4]))<br><br>    try:<br>        # Save x1 to file<br>        np.savetxt(&quot;C:/Users\suso\Desktop/yolov5_fire/x1.txt&quot;, x1, delimiter=&#x27; &#x27;, fmt=&#x27;%f&#x27;)<br>        # Save x2 to file<br>        np.savetxt(&quot;C:/Users\suso\Desktop/yolov5_fire/x2.txt&quot;, x2, delimiter=&#x27; &#x27;, fmt=&#x27;%f&#x27;)<br>        # Save x3 to file<br>        np.savetxt(&quot;C:/Users\suso\Desktop/yolov5_fire/x3.txt&quot;, x3, delimiter=&#x27; &#x27;, fmt=&#x27;%f&#x27;)<br>    except Exception as e:<br>        print(f&quot;An error occurred: &#123;str(e)&#125;&quot;)<br><br>    out_data_raw = np.vstack((x1,x2,x3))<br>    np.savetxt(&quot;C:/Users\suso\Desktop/yolov5_fire/x4.txt&quot;, out_data_raw, delimiter=&#x27; &#x27;, fmt=&#x27;%f&#x27;)<br>    output_from_txt = decode_output(out_data_raw,anchors)<br><br>    print(len(pred),pred[0].shape)<br>    print(&quot;ffffffffff&quot;,max(np.array(pred[0]).reshape(-1, 6)[:,4]))<br>    # pred = py_cpu_nms(np.array(pred[0]).reshape(-1, 6), 0.2, 0.45)<br>    pred = py_cpu_nms(output_from_txt, 0.2, 0.45)<br>    <br>    return pred,img<br><br>#---------------draw--------------------------------------------<br>def drawHelmetBox(frame,bbox):<br>    print(bbox)<br>    cv2.rectangle(frame, (int(bbox[0]), int(bbox[1])), (int(bbox[2]), int(bbox[3])), (0, 255, 0), 3)<br>    label = f&#x27;&#123;float(bbox[4]*bbox[5]):.2f&#125;&#x27;<br>    cv2.putText(frame, label, (int(bbox[0]), int(bbox[1])+20), 0, 1, [0, 255, 0], thickness=2, lineType=cv2.LINE_AA)<br>    cv2.imshow(&#x27;frame&#x27;,frame)<br>    cv2.waitKey(0)<br>    cv2.destroyAllWindows()<br><br>def scale_boxes(img1_shape, boxes, img0_shape, ratio_pad=None):<br>    # Rescale boxes (xyxy) from img1_shape to img0_shape<br>    if ratio_pad is None:  # calculate from img0_shape<br>        gain = min(img1_shape[0] / img0_shape[0], img1_shape[1] / img0_shape[1])  # gain  = old / new<br>        pad = (img1_shape[1] - img0_shape[1] * gain) / 2, (img1_shape[0] - img0_shape[0] * gain) / 2  # wh padding<br>    else:<br>        gain = ratio_pad[0][0]<br>        pad = ratio_pad[1]<br><br>    boxes[..., [0, 2]] -= pad[0]  # x padding<br>    boxes[..., [1, 3]] -= pad[1]  # y padding<br>    boxes[..., :4] /= gain<br>    clip_boxes(boxes, img0_shape)<br>    return boxes<br><br>def clip_boxes(boxes, shape):<br>    # Clip boxes (xyxy) to image shape (height, width)<br>    if isinstance(boxes, torch.Tensor):  # faster individually<br>        boxes[..., 0].clamp_(0, shape[1])  # x1<br>        boxes[..., 1].clamp_(0, shape[0])  # y1<br>        boxes[..., 2].clamp_(0, shape[1])  # x2<br>        boxes[..., 3].clamp_(0, shape[0])  # y2<br>    else:  # np.array (faster grouped)<br>        boxes[..., [0, 2]] = boxes[..., [0, 2]].clip(0, shape[1])  # x1, x2<br>        boxes[..., [1, 3]] = boxes[..., [1, 3]].clip(0, shape[0])  # y1, y2<br></code></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight plaintext"><figcaption><span>[测试]</span></figcaption><table><tr><td class="code"><pre><code class="hljs plaintext">import cv2<br>import os<br>from HelmetDetection import helmet_detect,helmet_scale_ratio,drawHelmetBox,scale_boxes<br><br># image_path = &#x27;C:/Users/suso/Desktop/yolov5_fire/frame_01_jpg.rf.7a9e0fe6e03efe5b3df01c7322aff0dc.jpg&#x27;<br>face_model = &#x27;C:/Users/suso/Desktop/yolov5_fire/best.onnx&#x27;<br>for imgname in os.listdir(&#x27;C:/Users/suso/Desktop/yolov5_fire/test_jpg&#x27;):<br>    print(imgname)<br>    image_path = &#x27;C:/Users/suso/Desktop/yolov5_fire/test_jpg/&#x27;+imgname<br>    frame = cv2.imread(image_path)<br>    helmet_pred,img = helmet_detect(face_model,frame)<br>    print(helmet_pred)<br>    for bbox in helmet_pred:<br>        bbox = helmet_scale_ratio(bbox,frame)#no letterbox<br>        # im_shape = img.shape[2:]<br>        # frame_shape = frame.shape<br>        # bbox = scale_boxes(im_shape, bbox, frame_shape)#add letterbox<br>        drawHelmetBox(frame,bbox)<br><br><br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>-html -onnx -detect</tag>
      </tags>
  </entry>
</search>
